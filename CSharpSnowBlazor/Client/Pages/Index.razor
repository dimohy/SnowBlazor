@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Diagnostics

@inject IJSRuntime JsRuntime;

@*<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Hello, world!</MudText>
    <MudText Class="mb-8">Welcome to your new app, powerd by MudBlazor!</MudText>
    <MudAlert Severity="Severity.Normal">You can find documentation and examples on our website here: <MudLink Href="https://mudblazor.com" Typo="Typo.body2" Color="Color.Inherit"><b>www.mudblazor.com</b></MudLink></MudAlert>
</MudContainer>
*@

<img @ref="snow" hidden src="images/csharp.png" />

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas @ref="canvasRef" />
</div>

@code
{
    static readonly int MaxSnow = 100;

    List<Snow> snowList = new List<Snow>();

    ElementReference snow;
    BECanvasComponent canvasRef;
    Canvas2DContext cc;
    int fpsCount = 0;
    Random rand;
    Stopwatch sw;
    int canvasWidth;
    int canvasHeight;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));

            cc = await canvasRef.CreateCanvas2DAsync();
            sw = Stopwatch.StartNew();
            rand = new Random();

            await cc.SetTextBaselineAsync(TextBaseline.Top);
            await cc.SetStrokeStyleAsync("white");
        }
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp, int width, int height)
    {
        if (snowList.Count < MaxSnow)
        {
            snowList.Add(new()
            {
                X = rand.Next(0, width),
                Y = -rand.Next(0, height),
                Kind = snowList.Count / (MaxSnow / 5)
            });
        }

        await cc.BeginBatchAsync();
        await cc.ClearRectAsync(0, 0, width, height);

        await cc.StrokeTextAsync($"count: {fpsCount}", 16, 16);

        foreach (var snow in snowList)
        {
            await cc.BeginPathAsync();
            await cc.ArcAsync(snow.X, snow.Y, snow.Size, 0, 2 * Math.PI, true);
            await cc.SetFillStyleAsync(snow.Color);
            await cc.FillAsync();

            snow.Y += snow.Kind switch { 0 => 1, 1 => 2, 2 => 3, 3 => 4, 4 => 5, _ => 5 };
            if (snow.Y > height)
                snow.Y = 0;

            snow.X += rand.Next(0, 2);
            if (snow.X > width)
                snow.X = 0;
        }

        await cc.EndBatchAsync();

        fpsCount++;
    }

    public class Snow
    {

        public float X { get; set; }
        public float Y { get; set; }
        public int Kind { get; set; }
        public float Size => Kind switch { 0 => 4, 1 => 6, 2 => 8, 3 => 12, 4 => 16, _ => 16 };
        public string Color => Kind switch { 0 => "#202020", 1 => "#404040", 2 => "#606060", 3 => "#808080", 4 => "#C0C0C0", _ => "#C0C0C0" };
    }
}